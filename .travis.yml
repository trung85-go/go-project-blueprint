# Matrix build runs 4 parallel builds
matrix:
  include:
    - language: go  # Build and Test
      sudo: required
      services:
        - docker
      script:
        - export GO111MODULE=on
        - go mod vendor  # Download dependencies
        - make build  # Build application
        - test -f bin/linux_amd64/blueprint  # Test for presence of binary built in previous step
        - make all-container  # Make all Docker containers
        - docker images | grep "^docker.pkg.github.com/trung85-go/go-project-blueprint/blueprint.*__linux_amd64"  # Check presence of created images
        - make test  # Runs tests inside test image

    - language: go  # SonarCloud
      addons:
        sonarcloud:
          organization: trung85-go
          token:
            secure: "CG1RoxDn0sJYEX8JiMfhhbHyDo2crdwcZvScvG3sypYoaYq+CSNMADxvuwnXk3LK7sNGvNazWQauEb0olUNDLHxYjT63IWt9quM91iZz2WSnQLlVw/lXy+DFHxQ3F11qi/m6odUejWxZ6bqaowx/ieJRS+DsuXvay7JTFb1uQF4TLTLGnFjRdGZPDIYZAaAm+ATs+joxK5ovkU83fdtS4ssONhQvwlsztj7Sah+WsPi7hvzvB7uRzvoGEgPtp7/MCmeS3zeZ34qodjHFR2cg09hudJmB4x2etvEZPi8f0aoIPrH0AWATSq/POarVfOYKI6jXItVUK8ngfDEab1ClLfIFTqlE8uQabP/7A5dmYv8VSLS61X15DMs1MNknWBayKf3P1l9xExJEY4q1bSLS3AbcBc9Er1ATHbQvXqEmtVicNj0y1TMscPZ2wlab0P2EFLXIcurMmo3NbIjarjlW1IsdRXCRclJCYXeMWdi78NklBrmxvdKtTxtzaqCdYAohXVGwXclovfHSpPDW9RoQj/3LSgKsKPEnp9zBgLWwrXBS5Vr9jcMSNohP+17SmYvOi3IlO5VM+R9w1Ps61G7/BE4wjlhozs974mlEIeQNqPRs4D4hXKIBx6gqATyEkqObn3BC0sRgF7lKapQ8mxFGUxr/N5XxhbJRMtNn9XQz6i0="
      before_script:
        - ./reports.sh  # Creates directories and files for reports
        - export GO111MODULE=on
        - go mod vendor  # Download dependencies
        - make ci  # Run tests and generate reports (See `ci` step in Makefile)
      script:
        - sonar-scanner  # Run analysis using SonarCloud scanner plugin

    - language: go  # CodeClimate
      before_script:
        - ./reports.sh  # Create directories and files for reports
        - curl -L https://codeclimate.com/downloads/test-reporter/test-reporter-latest-linux-amd64 > ./cc-test-reporter  # Download CodeClimate test reporter
        - chmod +x ./cc-test-reporter  # Make it executable
        - ./cc-test-reporter before-build  # Notify CodeClimate of pending report
      script:
        - export GO111MODULE=on
        - go mod vendor  # Download dependencies
        - make ci  # Run tests and generate reports (See `ci` step in Makefile)
      after_script:
        # Add Environment Variable: name: CC_TEST_REPORTER_ID, value: Copied from CodeClimate
        # Get TEST REPORTER ID at: https://codeclimate.com/repos/5f114fcb20e8de018b00b776/settings/test_reporter
        - ./cc-test-reporter after-build -t gocov --exit-code $TRAVIS_TEST_RESULT  # Send report to CodeClimate or notify it of failing build based on exit code

    - language: go  # Push if on master
      services:
        - docker
      if: branch = master
      script:
        - export GO111MODULE=on
        - go mod vendor  # Download dependencies
        - echo "$DOCKER_PASSWORD" | docker login docker.pkg.github.com -u "$DOCKER_USERNAME" --password-stdin  # Login to GitHub Registry using Travis environment variables
        - make container  # Create dirty and latest images
        - make push  # Push image to registry

notifications:
  email: false
